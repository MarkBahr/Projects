#load libraries
library(tidyverse)
library(TTR)
#install packages
# install.packages ("tidyverse")
install.packages("TTR")
library(TTR)
#set working directory (adjust this for your own computer)
setwd("C:/Users/Admin/Data-Science/Data-Science/DTSC-560-DataScience-for-Business/Module-4")
#set working directory (adjust this for your own computer)
setwd("C:/Users/Admin/Data-Science/Data-Science/DTSC-560-DataScience-for-Business/Module-4-Forecasting")
#read dataset into R
milkdf <- read.csv("united_dairies.csv")
View(milkdf)
#create a time series plot showing 12 weeks of milk sales
ggplot(data = milkdf, mapping = aes(x = Week, y = Sales)) +
geom_line () +
geom_point() +
scale_x_continuous(breaks = seq(0, 13, by = 1)) +
labs(title = "Weekly milk sales for United Dairies", x = "Week", y = "Sales")
#create a separate vector for the actual weekly sales
sales_actuals<-milkdf$Sales
#use the naive method to forecast the 13th week of milk sales
naive13 <- c(NA, sales_actuals)
naive13
#Create functions for the accuracy measures with vector of actual values
#and vector of predicted values as inputs
mae<-function(actual,pred){
mae <- mean(abs(actual-pred), na.rm=TRUE)
return (mae)
}
mse<-function(actual,pred){
mse <- mean((actual-pred)^2, na.rm=TRUE)
return (mse)
}
rmse<-function(actual,pred){
rmse <- sqrt(mean((actual-pred)^2, na.rm=TRUE))
return (rmse)
}
mape<-function(actual,pred){
mape <- mean(abs((actual - pred)/actual), na.rm=TRUE)*100
return (mape)
}
#Adjust the vector of predicted values to align with the sales_actuals vector
Naive_pred <- naive13[-length(naive13)]
#Adjust the vector of predicted values to align with the sales_actuals vector
Naive_pred <- naive13[-length(naive13)] # use negative indexing to remove the value in the index
#Calculate accuracy measures with vector of actual values and vector
#of predicted values as inputs
mae(sales_actuals, Naive_pred)
mse(sales_actuals, Naive_pred)
rmse(sales_actuals, Naive_pred)
mape(sales_actuals, Naive_pred)
sma13<-SMA (sales_actuals, n=3)
sma13
#Adjust the vector of predicted values to align with the sales_actuals vector
sales_ma_pred<-c(NA, sma13[-length(sma13)])
sales_ma_pred
#Calculate accuracy measures with vector of actual values and vector
#of predicted values as inputs
mae(sales_actuals, sales_ma_pred)
mse(sales_actuals, sales_ma_pred)
rmse(sales_actuals, sales_ma_pred)
mape(sales_actuals, sales_ma_pred)
#use the exponential smoothing method with alpha = 0.2 to forecast the
#13th week of milk sales
exp13 <- EMA (sales_actuals, n=1, ratio = .2)
exp13
#Adjust the vector of predicted values to align with the sales_actuals vector
# Because there's not data for the first week.
exp_pred <- c(NA, exp13[-length(exp13)])
mape(sales_actuals, exp_pred)
mae(sales_actuals, exp_pred)
mse(sales_actuals, exp_pred)
rmse(sales_actuals, exp_pred)
#use the exponential smoothing method with alpha = 0.4 to forecast the
#13th week of milk sales
exp13_4 <- EMA (sales_actuals, n=1, ratio = .4)
exp13_4
#Adjust the vector of predicted values to align with the sales_actuals vector
exp_pred_4 <- c(NA, exp13_4[-length(exp13_4)])
mae(sales_actuals, exp_pred_4)
mse(sales_actuals, exp_pred_4)
rmse(sales_actuals, exp_pred_4)
mape(sales_actuals, exp_pred_4)
#load libraries
library(tidyverse)
#set working directory (adjust this for your own computer)
setwd("C:/Users/Admin/Data-Science/Data-Science/DTSC-560-DataScience-for-Business/Module-4-Forecasting")
#read dataset into R
starbucksdf <- read.csv("starbucks_revenue.csv")
View(starbucksdf)
#create a time series plot showing yearly net revenue in billions
ggplot(data = starbucksdf, mapping = aes(x = Year, y = NetRevenue)) +
geom_line () +
geom_point() +
labs(title = "Starbucks Yearly Net Revenue in Billions of Dollars,
2003 to 2021", x = "Year", y = "Net Revenue")
#Add a column of consecutive numbers corresponding with each year
# Rather than using the year column, use numbers from 1 to 19, for how many years, t
starbucksdf$Time <- 1:nrow(starbucksdf)
#Add a column of consecutive numbers corresponding with each year
# Rather than using the year column, use numbers from 1 to 19, for how many years, t, Time
starbucksdf$Time <- 1:nrow(starbucksdf)
#Use simple linear regression analysis to create a regression equation for
#forecasting
sbreg<-lm(NetRevenue ~ Time, data = starbucksdf)
summary(sbreg)
#Predict Starbucks revenue for 2022
2.547+1.209*20
#Create a data frame with the time periods to use for the prediction
new <- data.frame(Time = c(20, 21, 22))
View(new)
# The arguments are 1) The linear reg output object, and 2) the new dataframe
# we use newdata = new to specify the new data.
predict(sbreg, newdata = new)
View(new)
# The arguments are 1) The linear reg output object, and 2) the new dataframe
# we use newdata = new to specify the new data.
predict(sbreg, newdata = new)
#Create a vector of predicted values generated from the
#regression above (sbreg)
sb_pred = predict(sbreg)
sb_pred
mae (starbucksdf$NetRevenue, sb_pred)
mse (starbucksdf$NetRevenue, sb_pred)
rmse (starbucksdf$NetRevenue, sb_pred)
mape (starbucksdf$NetRevenue, sb_pred)
# load libraries
library(tidyverse)
#set working directory (adjust this for your own computer)
setwd("C:/Users/Admin/Data-Science/Data-Science/Data-Science-Projects")
#read dataset into R
retail_sales <- read.csv("starbucks_revenue.csv")
View(retail_sales)
#read dataset into R
retail_sales <- read.csv("us-retail.csv")
View(retail_sales)
# Plot time series showing yearly retail sales in billions
ggplot(data = retail_sales, mapping = aes(x = Year, y = Retail_Sales)) +
geom_line() +
gemo_point() +
labs(title = "Total Retail Sales in the U.S. from 1992 to 2023",
x = "Year", y = "Retail Sales in Billions")
# Plot time series showing yearly retail sales in billions
ggplot(data = retail_sales, mapping = aes(x = Year, y = Retail_Sales)) +
geom_line() +
geom_point() +
labs(title = "Total Retail Sales in the U.S. from 1992 to 2023",
x = "Year", y = "Retail Sales in Billions")
# Plot time series showing yearly retail sales in billions
ggplot(data = retail_sales, mapping = aes(x = Year, y = Retail_Sales)) +
geom_line() +
geom_point() +
labs(title = "Total Retail Sales in the U.S. from 1992 to 2023",
x = "Year", y = "Retail Sales (in Billions)")
seq(0, 13, by = 1)
seq(1992, 2022, by = 2)
seq(1992, 2022, by = 5)
# Plot time series showing yearly retail sales in billions
ggplot(data = retail_sales, mapping = aes(x = Year, y = Retail_Sales)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = seq(1992, 2022, by = 5))
# Plot time series showing yearly retail sales in billions
ggplot(data = retail_sales, mapping = aes(x = Year, y = Retail_Sales)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = seq(1992, 2022, by = 2))
# Plot time series showing yearly retail sales in billions
ggplot(data = retail_sales, mapping = aes(x = Year, y = Retail_Sales)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = seq(1992, 2022, by = 4))
# Plot time series showing yearly retail sales in billions
ggplot(data = retail_sales, mapping = aes(x = Year, y = Retail_Sales)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = seq(1992, 2024, by = 4))
# Plot time series showing yearly retail sales in billions
ggplot(data = retail_sales, mapping = aes(x = Year, y = Retail_Sales)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = seq(1992, 2023, by = 4))
seq(1600, 7400, by 500)
seq(1600, 7400, by = 500)
seq(1500, 7500, by = 500)
# Plot time series showing yearly retail sales in billions
ggplot(data = retail_sales, mapping = aes(x = Year, y = Retail_Sales)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = seq(1992, 2023, by = 4)) +
scale_y_continuous(breaks = seq(1500, 7500, by = 500))
#create a time series plot showing 12 weeks of milk sales
ggplot(data = milkdf, mapping = aes(x = Week, y = Sales)) +
geom_line () +
geom_point() +
scale_x_continuous(breaks = seq(0, 13, by = 1)) +
labs(title = "Weekly milk sales for United Dairies", x = "Week", y = "Sales")
# Plot time series showing yearly retail sales in billions
ggplot(data = retail_sales, mapping = aes(x = Year, y = Retail_Sales)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = seq(1992, 2023, by = 4)) +
scale_y_continuous(breaks = seq(1500, 7500, by = 500))
# Plot time series showing yearly retail sales in billions
ggplot(data = retail_sales, mapping = aes(x = Year, y = Retail_Sales)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = seq(1992, 2023, by = 4)) +
scale_y_continuous(breaks = seq(1500, 7500, by = 1000))
# Plot time series showing yearly retail sales in billions
ggplot(data = retail_sales, mapping = aes(x = Year, y = Retail_Sales)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = seq(1992, 2023, by = 4)) +
scale_y_continuous(breaks = seq(1000, 8000, by = 1000))
# Plot time series showing yearly retail sales in billions
ggplot(data = retail_sales, mapping = aes(x = Year, y = Retail_Sales)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = seq(1990, 2025, by = 5)) +
scale_y_continuous(breaks = seq(1000, 8000, by = 1000))
#create a time series plot showing 12 weeks of milk sales
ggplot(data = milkdf, mapping = aes(x = Week, y = Sales)) +
geom_line () +
geom_point() +
scale_x_continuous(breaks = seq(0, 13, by = 1)) +
labs(title = "Weekly milk sales for United Dairies", x = "Week", y = "Sales")
# Plot time series showing yearly retail sales in billions
ggplot(data = retail_sales, mapping = aes(x = Year, y = Retail_Sales)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = seq(1990, 2025, by = 5)) +
scale_y_continuous(breaks = seq(1000, 8000, by = 1000))
# Plot time series showing yearly retail sales in billions
ggplot(data = retail_sales, mapping = aes(x = Year, y = Retail_Sales)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = seq(1990, 2025, by = 5)) +
scale_y_continuous(breaks = seq(1000, 8000, by = 1000)) +
labs(title = "Total Retail Sales in the U.S. from 1992 to 2023",
x = "Year", y = "Retail Sales (in Billions)")
#create a time series plot showing 12 weeks of milk sales
ggplot(data = milkdf, mapping = aes(x = Week, y = Sales)) +
geom_line () +
geom_point() +
scale_x_continuous(breaks = seq(0, 13, by = 1)) +
labs(title = "Weekly milk sales for United Dairies", x = "Week", y = "Sales")
# Plot time series showing yearly retail sales in billions
ggplot(data = retail_sales, mapping = aes(x = Year, y = Retail_Sales)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = seq(1990, 2025, by = 5)) +
scale_y_continuous(breaks = seq(1000, 8000, by = 1000)) +
labs(title = "Total Retail Sales in the U.S. from 1992 to 2023",
x = "Year", y = "Retail Sales (in Billions)")
# Add a column of numbers corresponding to each year (1 to 32) for time
retail_sales$Time <- 1:nrow(retail_sales)
#read dataset into R
sales_df <- read.csv("us-retail.csv")
# The Retail_Sales column values are in billions of US dollars
View(sales_df)
# Plot time series showing yearly retail sales in billions
ggplot(data = sales_df, mapping = aes(x = Year, y = Retail_Sales)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = seq(1990, 2025, by = 5)) +
scale_y_continuous(breaks = seq(1000, 8000, by = 1000)) +
labs(title = "Total Retail Sales in the U.S. from 1992 to 2023",
x = "Year", y = "Retail Sales (in Billions)")
# Add a column of numbers corresponding to each year (1 to 32) for time
sales_df$Time <- 1:nrow(sales_df)
# Create a regression equation using simple linear regression for forecasting
lm_retail <- lm(Retail_Sales ~ Time, data = sales_df)
